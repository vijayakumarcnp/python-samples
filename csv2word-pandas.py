
""" csv2word-pandas.py at https://github.com/wilsonmar/python-samples/blob/main/csv2word-pandas.py

STATUS: NOT WORKING.
git commit -m "v001 assembling :csv2word-pandas.py"

Read a CSV file using the pandas library and
create a MS-Word .docx file with multiple columns using the python-docx library.

Before running this:
pip install pandas  # To read and handle the CSV file.
pip install python-docx  # To create and manipulate Word documents.

Based on code generated by Perplexity.ai on 24-11-12 from prompt.
"""

import pandas as pd
from docx import Document

def csv_to_word(csv_file, word_file):
    # Step 1: Read the CSV file using pandas:
    df = pd.read_csv(csv_file)

    # Step 2: Create a new Word document:
    doc = Document()

    # Add a title (optional)
    doc.add_heading('CSV Data in Word Format', level=1)

    # Step 3: Add a table to the Word document with the same number of columns as the CSV
    # Create a table with the same number of rows and columns as the dataframe
    table = doc.add_table(rows=1, cols=len(df.columns))

    # Step 4: Add headers to the table (column names)
    hdr_cells = table.rows[0].cells
    for i, column_name in enumerate(df.columns):
        hdr_cells[i].text = column_name

    # Step 5: Populate the table with data from the CSV
    for index, row in df.iterrows():
        row_cells = table.add_row().cells
        for i, value in enumerate(row):
            row_cells[i].text = str(value)

    # Step 6: Save the Word document
    doc.save(word_file)
    print(f"Word file '{word_file}' has been created successfully.")


# Example usage:
if __name__ == "__main__":
    csv_file = 'example.csv'   # Replace with your CSV file path
    word_file = 'output.docx'   # The Word file you want to generate
    csv_to_word(csv_file, word_file)


""" Explanation of the Code:
Example CSV (example.csv):
Name, Age, Occupation
John, 28, Engineer
Alice, 30, Data Scientist
Bob, 25, Designer

Read the CSV File:
1. The pandas.read_csv() function is used to load the CSV file into a DataFrame (df). This allows you to easily access and manipulate the data.
2. Create a Word Document:
3. A new Word document is created using Document() from the python-docx library.
4. Add a Table to the Word Document:
5. The first row is used to add the headers (i.e., column names from the CSV).
6. We then loop through the rows of the DataFrame (df.iterrows()) and add each row of data into the Word table.
7. Save the Word Document:
8. The document is saved with the specified file name using doc.save().

Notes:
The table in the Word document will automatically adjust its size to fit the data.
The CSV file can contain any number of columns or rows, and the script will adjust accordingly.
If you need additional formatting (e.g., changing font size, applying styles), python-docx provides extensive features to customize the Word document.
This method allows you to easily convert CSV data into a well-structured Word document with multiple columns.
"""