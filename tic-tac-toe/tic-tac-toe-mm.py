#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MPL-2.0
"""tic-tac-toe-mm.py at https://github.com/wilsonmar/python-samples/blob/main/tic-tac-toe-mm.py
Not yet explained at https://wilsonmar.github.io/python-samples 
   
This is an adaptation of a classic two-player game perhaps played to settle an arugment.
However, this program helps you experience the dystopian futility of playing with an AI which 
will never lose to a human player.

The "mm" in the name is for this program's use of the Minimax algorithm that 
evaluates all possible moves and chooses the best one, which make this game unbeatable.
The minmax function is obtained by importing the math library.
The base code was generated by https://www.perplexity.ai/search/tic-tak-toe-nn_NRtkZTCSxOyC7uIElMQ
which does NOT use Python class objects.

This program can be manually run by "chmod +x tic-tac-toe-oop.py" then "./tic-tac-toe-oop.py".
See https://www.youtube.com/watch?v=Q6CCdCBVypg

Alternately, this file is within a folder so that, during unit testing, this program can be 
run automatically after a one-time CLI "pip install pytest" to load the popular third-party 
testing framework with a more concise syntax and powerful features compared to unittest.

Unit-testing command "pytest" auto-discovers and executes all test files named with prefix "test_".
They determine whether outputs are correct given a sset of inputs.
    See https://www.geeksforgeeks.org/object-oriented-testing-in-python/
    https://www.youtube.com/watch?v=YbpKMIUjvK8 =  How To Write Unit Tests in Python â€¢ Pytest Tutorial
    See https://www.youtube.com/watch?v=cHYq1MRoyI0& = Freecodecamp: How to Test Python Code by @iamrithmic

NOTE: In the code, 3 characters are used to indent.

This program starts by executing the "print_board" function to show a 3x3 grid.
The "show_board" function displays the grid.
Alternately, dividing lines can be added like at https://www.youtube.com/watch?v=7Djh-Cbgi0E

This program presents a text-based UI (not a Tkinter GUI) as in 
https://realpython.com/tic-tac-toe-python/ or https://www.youtube.com/watch?v=gNCpUS4d1Oo
https://github.com/softwareNuggets/Python_TKInter_Tic_Tac_Toe/blob/main/tic_tac_toe_pro.py
which can be turned into a mobile app.
https://stackoverflow.com/questions/4083796/how-do-i-run-unittest-on-a-tkinter-app

Within an infinite loop "while True:",
a win goes to the first player to mark three Os or Xs diagonally, horizontally, or vertically,
as determined by function "check_winner".

Each player must also block their opponent while attempting to make their chain.
Thus, this code has a nested loops to check for winning columns, rows, and diagonals.

Two players in the game alternate turns to mark the board with O or X.

To the prompt "Enter row (0-2):" & "Enter col (0-2):" 
the player enters two numbers, such 1 and 2 for the second row and third column.

TODO: Number from 1 instead of 0 or the 1-9 numbering as in 
https://replit.com/login?source=new-repl&goto=%2Fnew%2Fpython3

Game play can be interrupted any time by manually pressing Control+C on macOS for a KeyboardInterrupt.

TODO: Check whether a spot is already taken and request another choice.

TODO: Recognize if a winning hand is present and alert players, as in
https://stackoverflow.com/questions/13734121/python-oop-tic-tac-toe

game_over is identified when the "is_board_filled()" condition is met.

The program stops when there is a tie or a winner.

TODO: Display winning board before declaring the winner.

TODO: At end of game, create another game and keep score.

Creative Commons Copyright (c) 2024 Wilson Mar 

Other examples: https://hackr.io/blog/python-projects

This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
OF ANY KIND, either express or implied. See the License for the specific
language governing permissions and limitations under the License.

TODO: This game can be expanded by adding a larger grid.
"""

import math

# Initialize the board
board = [[' ' for _ in range(3)] for _ in range(3)]
# TODO: Instead of two numbers, enable users to specify a single number from 1 to 9 to specify the 9 positions.

def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
            return True
    if board[0][0] == board[1][1] == board[2][2] == player or board[0][2] == board[1][1] == board[2][0] == player:
        return True
    return False

def is_draw(board):
    return all([cell != ' ' for row in board for cell in row])

def minimax(board, depth, is_maximizing):
    if check_winner(board, 'X'):
        return 1
    if check_winner(board, 'O'):
        return -1
    if is_draw(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score
    
def find_best_move(board):
    best_move = None
    best_score = -float('inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move

def play_game():
    print("Welcome to Tic-Tac-Toe!")
    current_player = 'O'  # Human player
    while True:
        print_board(board)
        if current_player == 'O':
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter col (0-2): "))
            if board[row][col] == ' ':
                board[row][col] = 'O'
                if check_winner(board, 'O'):
                    print("O wins!")
                    break
                current_player = 'X'
        else:
            move = find_best_move(board)
            print("Computer's move marked as X:")
            if move:
                board[move[0]][move[1]] = 'X'
                if check_winner(board, 'X'):
                    print("X wins!")
                    break
                current_player = 'O'
        if is_draw(board):
            print("It's a draw!")
            break

if __name__ == '__main__':
   play_game()